/* Copyright 2010-2019 Will Scullin <scullin@scullinsteel.com>
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation.  No representations are made about the suitability of this
 * software for any purpose.  It is provided "as is" without express or
 * implied warranty.
 */

// export default function KeyBoard(cpu, io, e) {
	export default function Display(vscode) {

		var _context;
		var _imageData;
		var _vscode = vscode;
		var _color0 = 0;
		var _color1 = 1;

		var tms9918_colorpalette=[];
		tms9918_colorpalette[0] = [0, 0, 0, 0];				//	Transparent
		tms9918_colorpalette[1] = [0, 0, 0, 255];			//	Black
		tms9918_colorpalette[2] = [70, 183, 62, 255];		//	Medium Green
		tms9918_colorpalette[3] = [127, 112, 255, 255];		//	Light Green
		tms9918_colorpalette[4] = [98, 91, 168, 255];		//	Dark Blue
		tms9918_colorpalette[5] = [127, 112, 255, 255];		//	Light Blue
		tms9918_colorpalette[6] = [182, 97, 72, 255];		//	Dark Red
		tms9918_colorpalette[7] = [91, 199, 239, 255];		//	Cyan
		tms9918_colorpalette[8] = [217, 106, 72, 255];		//	Medium Red
		tms9918_colorpalette[9] = [252, 142, 108, 255];		//	Light Red
		tms9918_colorpalette[10] = [194, 206, 65, 255];		//	Dark Yellow
		tms9918_colorpalette[11] = [211, 218, 116, 255];	//	Light Yellow
		tms9918_colorpalette[12] = [60, 160, 116, 255];		//	Dark Green
		tms9918_colorpalette[13] = [183, 99, 198, 255];		//	Magenta
		tms9918_colorpalette[14] = [204, 204, 204, 255];	//	Gray
		tms9918_colorpalette[15] = [255, 255, 255];			//	White

		var tms9918_charset=[];
		tms9918_charset[0x00] = [0xF8,0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00];
		tms9918_charset[0x20] = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];
		tms9918_charset[0x21] = [0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00];
		tms9918_charset[0x22] = [0x50,0x50,0x50,0x00,0x00,0x00,0x00,0x00];
		tms9918_charset[0x23] = [0x50,0x50,0xF8,0x50,0xF8,0x50,0x50,0x00];
		tms9918_charset[0x24] = [0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00];
		tms9918_charset[0x25] = [0xC0,0xC8,0x10,0x20,0x40,0x98,0x18,0x00];
		tms9918_charset[0x26] = [0x40,0xA0,0xA0,0x40,0xA8,0x90,0x68,0x00];
		tms9918_charset[0x27] = [0x20,0x20,0x20,0x00,0x00,0x00,0x00,0x00];
		tms9918_charset[0x28] = [0x20,0x40,0x80,0x80,0x80,0x40,0x20,0x00];
		tms9918_charset[0x29] = [0x20,0x10,0x08,0x08,0x08,0x10,0x20,0x00];
		tms9918_charset[0x2A] = [0x20,0xA8,0x70,0x20,0x70,0xA8,0x20,0x00];
		tms9918_charset[0x2B] = [0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00];
		tms9918_charset[0x2C] = [0x00,0x00,0x00,0x00,0x20,0x20,0x40,0x00];
		tms9918_charset[0x2D] = [0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00];
		tms9918_charset[0x2E] = [0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00];
		tms9918_charset[0x2F] = [0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00];
		tms9918_charset[0x30] = [0x70,0x88,0x98,0xA8,0xC8,0x88,0x70,0x00];
		tms9918_charset[0x31] = [0x20,0x60,0x20,0x20,0x20,0x20,0x70,0x00];
		tms9918_charset[0x32] = [0x70,0x88,0x08,0x30,0x40,0x80,0xF8,0x00];
		tms9918_charset[0x33] = [0xF8,0x08,0x10,0x30,0x08,0x88,0x70,0x00];
		tms9918_charset[0x34] = [0x10,0x30,0x50,0x90,0xF8,0x10,0x10,0x00];
		tms9918_charset[0x35] = [0xF8,0x80,0xF0,0x08,0x08,0x88,0x70,0x00];
		tms9918_charset[0x36] = [0x38,0x40,0x80,0xF0,0x88,0x88,0x70,0x00];
		tms9918_charset[0x37] = [0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00];
		tms9918_charset[0x38] = [0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00];
		tms9918_charset[0x39] = [0x70,0x88,0x88,0x78,0x08,0x10,0xE0,0x00];
		tms9918_charset[0x3A] = [0x00,0x00,0x20,0x00,0x20,0x00,0x00,0x00];
		tms9918_charset[0x3B] = [0x00,0x00,0x20,0x00,0x20,0x20,0x40,0x00];
		tms9918_charset[0x3C] = [0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x00];
		tms9918_charset[0x3D] = [0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00];
		tms9918_charset[0x3E] = [0x40,0x20,0x10,0x08,0x10,0x20,0x40,0x00];
		tms9918_charset[0x3F] = [0x70,0x88,0x10,0x20,0x20,0x00,0x20,0x00];
		tms9918_charset[0x40] = [0x70,0x88,0xA8,0xB8,0xB0,0x80,0x78,0x00];
		tms9918_charset[0x41] = [0x20,0x50,0x88,0x88,0xF8,0x88,0x88,0x00];
		tms9918_charset[0x42] = [0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00];
		tms9918_charset[0x43] = [0x70,0x88,0x80,0x80,0x80,0x88,0x70,0x00];
		tms9918_charset[0x44] = [0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00];
		tms9918_charset[0x45] = [0xF8,0x80,0x80,0xF0,0x80,0x80,0xF8,0x00];
		tms9918_charset[0x46] = [0xF8,0x80,0x80,0xF0,0x80,0x80,0x80,0x00];
		tms9918_charset[0x47] = [0x78,0x80,0x80,0x80,0x98,0x88,0x78,0x00];
		tms9918_charset[0x48] = [0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00];
		tms9918_charset[0x49] = [0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00];
		tms9918_charset[0x4A] = [0x08,0x08,0x08,0x08,0x08,0x88,0x70,0x00];
		tms9918_charset[0x4B] = [0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00];
		tms9918_charset[0x4C] = [0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00];
		tms9918_charset[0x4D] = [0x88,0xD8,0xA8,0xA8,0x88,0x88,0x88,0x00];
		tms9918_charset[0x4E] = [0x88,0x88,0xC8,0xA8,0x98,0x88,0x88,0x00];
		tms9918_charset[0x4F] = [0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00];
		tms9918_charset[0x50] = [0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00];
		tms9918_charset[0x51] = [0x70,0x88,0x88,0x88,0xA8,0x90,0x68,0x00];
		tms9918_charset[0x52] = [0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00];
		tms9918_charset[0x53] = [0x70,0x88,0x80,0x70,0x08,0x88,0x70,0x00];
		tms9918_charset[0x54] = [0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00];
		tms9918_charset[0x55] = [0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00];
		tms9918_charset[0x56] = [0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00];
		tms9918_charset[0x57] = [0x88,0x88,0x88,0xA8,0xA8,0xD8,0x88,0x00];
		tms9918_charset[0x58] = [0x88,0x88,0x50,0x20,0x50,0x88,0x88,0x00];
		tms9918_charset[0x59] = [0x88,0x88,0x50,0x20,0x20,0x20,0x20,0x00];
		tms9918_charset[0x5A] = [0xF8,0x08,0x10,0x20,0x40,0x80,0xF8,0x00];
		tms9918_charset[0x5B] = [0xF8,0xC0,0xC0,0xC0,0xC0,0xC0,0xF8,0x00];
		tms9918_charset[0x5C] = [0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00];
		tms9918_charset[0x5D] = [0xF8,0x18,0x18,0x18,0x18,0x18,0xF8,0x00];
		tms9918_charset[0x5E] = [0x00,0x00,0x20,0x50,0x88,0x00,0x00,0x00];
		tms9918_charset[0x5F] = [0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00];
		tms9918_charset[0x60] = [0x40,0x20,0x10,0x00,0x00,0x00,0x00,0x00];
		tms9918_charset[0x61] = [0x20,0x70,0xF8,0xF8,0x70,0x20,0x00,0x00];

		var _ds;

		return {


			_getRandomInt(max) {
				return Math.floor(Math.random() * Math.floor(max));
			},

			init: function(context) {
				this._context = context;
				this._imageData = this._context.createImageData(560, 384);
				// for (let idx = 0; idx < 560 * 384 * 4; idx++) {
				// 	this._imageData.data[idx] = this._getRandomInt(255);
				// }

				// this._imageData.data[0] = 0x55;

				// this.blit();
				for (let y = 1; y < 25; y++) {
					for (let x = 1; x < 41; x++) {
						this.drawChar(0x20, x, y);
					}
				}
			},

			create: function display_create(el) {
				_ds = document.querySelector(el);
			},

			write(char, posx, posy) {
				this._imageData.data[0] = 0x55;
			},

			setColor0(color) {
				_color0 = color;
			},

			setColor1(color) {
				_color1 = color;
			},

			drawChar(char, posx, posy) {
				const nbPixelPerLine = 560 * 4;
				var color = 0;

				console.log(char, posx, posy);
				var ptr = ((posy - 1) * 2 * 8 * nbPixelPerLine) + ((posx - 1) * 6 * 4 * 2);
				for (let yindex = 0; yindex < 8; yindex += 1) {
					for (let xindex = 0; xindex < 6; xindex += 1) {

						if (tms9918_charset[char][yindex] & (1 << (7 - xindex))) {
							color = tms9918_colorpalette[_color1];
						} else {
							color = tms9918_colorpalette[_color0];;
						}
						this._imageData.data[ptr] = color[0];
						this._imageData.data[ptr + 1] = color[1];
						this._imageData.data[ptr + 2] = color[2];
						this._imageData.data[ptr + 3] = color[3];

						ptr = ptr + 4;

						this._imageData.data[ptr] = color[0];
						this._imageData.data[ptr + 1] = color[1];
						this._imageData.data[ptr + 2] = color[2];
						this._imageData.data[ptr + 3] = color[3];

						ptr = ptr + nbPixelPerLine - 4;

						this._imageData.data[ptr] = color[0];
						this._imageData.data[ptr + 1] = color[1];
						this._imageData.data[ptr + 2] = color[2];
						this._imageData.data[ptr + 3] = color[3];

						ptr = ptr + 4;

						this._imageData.data[ptr] = color[0];
						this._imageData.data[ptr + 1] = color[1];
						this._imageData.data[ptr + 2] = color[2];
						this._imageData.data[ptr + 3] = color[3];

						ptr = ptr - nbPixelPerLine;
						ptr = ptr + 4;

					}
					ptr = ptr - (6 * 4 * 2);
					ptr = ptr + (2 * nbPixelPerLine);
				}

				this.blit();
			},

			// refresh() {
			// 	let addr = 0x400;
			// 	this._refreshing = true;
			// 	for (let idx = 0; idx < 0x400; idx++, addr++) {
			// 		this._write(addr >> 8, addr & 0xff, this._buffer[0][idx], 0);
			// 	}
			// 	this._refreshing = false;
			// },

			blit() {
				const left = 561;
				const right = -1;
				let top = 385;
				const bottom = -1;
				this._context.putImageData(this._imageData, 0, 0, left, top, right - left, bottom - top);
			}
		};
	}
